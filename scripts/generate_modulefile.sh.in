#!/bin/bash

prefix="@prefix@"
exec_prefix="@exec_prefix@"
libdir="@libdir@"
bindir="@bindir@"
EXTRA_VERSION_INFO="@EXTRA_VERSION_INFO@"
PSCOM_LDFLAGS="@PSCOM_LDFLAGS@"
PSCOM_LIBDIR="${PSCOM_LDFLAGS#-L}"

function error() {
    echo "error: $*"
    exit 1
}

function generate() {

    _extra_version_info=""
    _extra_version_info_long=""
    if [ "$EXTRA_VERSION_INFO" != "" ];then
	_extra_version_info=" ($EXTRA_VERSION_INFO)"
	_extra_version_info_long="  $EXTRA_VERSION_INFO"
    fi
    # Path to libpscom
    ld_library_path="$PSCOM_LIBDIR"

    if [ "$PSCOM_LIBDIR" != "/opt/parastation/lib64" ]; then
	# Path to libpsi, if different to libpscom
	ld_library_path="$ld_library_path:/opt/parastation/lib64"
    fi

    mpi_home="$prefix"

cat <<EOF
#%Module1.0
## parastation mpi modulefile
##

proc ModulesHelp { } {
	global mpi_home

	puts stderr " Parastation 5.1 MPI tools and libraries for parallel computing."
	puts stderr "$_extra_version_info_long"
	puts stderr "\nBuild details:"
	set data [exec cat \$mpi_home/VERSION.psmpi]
	puts stderr \$data
	puts stderr " "
}

module-whatis "Parastation MPI library for parallel computing${_extra_version_info}."

set mpi_home ${mpi_home}

conflict mpi

setenv MPI_HOME \${mpi_home}
setenv FORT_BUFFERED true

prepend-path PATH ${bindir/$mpi_home/\$mpi_home}:/opt/parastation/bin
prepend-path LD_LIBRARY_PATH ${libdir/$mpi_home/\$mpi_home}:$ld_library_path
prepend-path MANPATH \${mpi_home}/share/man:/opt/parastation/share/man
prepend-path --delim , PSI_EXPORTS FORT_BUFFERED

EOF
}

generate

# Local Variables:
#  compile-command: "./generate_modulefile.sh.in"
# End:
